// Project:         ClassicExploits mod for Daggerfall Unity (http://www.dfworkshop.net)
// Copyright:       Copyright (C) 2022 Kirk.O
// License:         MIT License (http://www.opensource.org/licenses/mit-license.php)
// Author:          Kirk.O
// Created On: 	    5/23/2022, 7:30 PM
// Last Edit:		5/24/2022, 7:30 PM
// Version:			1.00
// Special Thanks:  Hazelnut, Ralzar, Jefetienne, Kab the Bird Ranger, Jehuty, ACNAero, and Interkarma
// Modifier:

using DaggerfallWorkshop.Game;
using DaggerfallWorkshop.Game.Entity;
using DaggerfallWorkshop.Game.Utility.ModSupport;
using DaggerfallWorkshop.Game.Utility;
using DaggerfallWorkshop.Game.MagicAndEffects;
using UnityEngine;
using System;
using DaggerfallWorkshop.Game.Formulas;
using DaggerfallConnect;

namespace ClassicExploits
{
    public class ClassicExploitsMain : MonoBehaviour
	{
        static ClassicExploitsMain instance;

        public static ClassicExploitsMain Instance
        {
            get { return instance ?? (instance = FindObjectOfType<ClassicExploitsMain>()); }
        }

        static Mod mod;

        [Invoke(StateManager.StateTypes.Start, 0)]
        public static void Init(InitParams initParams)
        {
            mod = initParams.Mod;
            instance = new GameObject("ClassicExploits").AddComponent<ClassicExploitsMain>(); // Add script to the scene.

            mod.IsReady = true;
        }

        private void Start()
        {
            Debug.Log("Begin mod init: Classic Exploits");

            FormulaHelper.RegisterOverride(mod, "SavingThrowSpellEffect", (Func<IEntityEffect, DaggerfallEntity, int>)SavingThrowSpellEffectOverride);
            FormulaHelper.RegisterOverride(mod, "SavingThrow", (Func<DFCareer.Elements, DFCareer.EffectFlags, DaggerfallEntity, int, int>)SavingThrowOverride);

            Debug.Log("Finished mod init: Classic Exploits");
        }

        public static int SavingThrowSpellEffectOverride(IEntityEffect sourceEffect, DaggerfallEntity target)
        {
            if (sourceEffect == null || sourceEffect.ParentBundle == null)
                return 100;

            DFCareer.EffectFlags effectFlags = FormulaHelper.GetEffectFlags(sourceEffect);
            DFCareer.Elements elementType = FormulaHelper.GetElementType(sourceEffect);
            int modifier = FormulaHelper.GetResistanceModifier(effectFlags, target);

            DFCareer.ToleranceFlags toleranceFlags = DFCareer.ToleranceFlags.Normal;

            if ((effectFlags & DFCareer.EffectFlags.Paralysis) != 0 && sourceEffect.Properties.ClassicKey == 66) // Presumably the identifier for the "Spider Touch" spell that spiders and scorpions use.
            {
                toleranceFlags |= FormulaHelper.GetToleranceFlag(target.Career.Poison);

                // If you have the "Immunity" trait then you are 100% immune to effects of this type.
                if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                    return 0;
            }

            return FormulaHelper.SavingThrow(elementType, effectFlags, target, modifier);
        }

        public static int SavingThrowOverride(DFCareer.Elements elementType, DFCareer.EffectFlags effectFlags, DaggerfallEntity target, int modifier)
        {
            DFCareer.ToleranceFlags toleranceFlags = DFCareer.ToleranceFlags.Normal;
            PlayerEntity playerEntity = GameManager.Instance.PlayerEntity;

            // Handle resistances granted by magical effects
            if (target.HasResistanceFlag(elementType))
            {
                int chance = target.GetResistanceChance(elementType);
                if (Dice100.SuccessRoll(chance))
                    return 0;
            }

            // Magic effect resistances did not stop the effect. Try with career flags and biography modifiers
            // Handle Racial and Tolerance flags for classic exploit based immunity.
            int savingThrow = 50;
            int biographyMod = 0;

            if ((effectFlags & DFCareer.EffectFlags.Paralysis) != 0)
            {
                toleranceFlags |= FormulaHelper.GetToleranceFlag(target.Career.Magic);

                // If you have "Immunity to Magic" trait then you are 100% immune to paralysis effects as well, as per the classic bug/exploit.
                if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                    return 0;

                toleranceFlags |= FormulaHelper.GetToleranceFlag(target.Career.Paralysis);

                // If you have the "Immunity" trait then you are 100% immune to effects of this type.
                if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                    return 0;

                // High Elves have 100% immunity, regardless of tolerance flags.
                if (target == playerEntity && playerEntity.Race == Races.HighElf)
                    return 0;
            }

            if ((effectFlags & DFCareer.EffectFlags.Poison) != 0)
            {
                toleranceFlags |= FormulaHelper.GetToleranceFlag(target.Career.Magic);

                // If you have "Immunity to Magic" trait then you are 100% immune to poison effects as well, as per the classic bug/exploit.
                if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                    return 0;

                toleranceFlags |= FormulaHelper.GetToleranceFlag(target.Career.Poison);

                // If you have the "Immunity" trait then you are 100% immune to effects of this type.
                if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                    return 0;

                if (target == playerEntity)
                    biographyMod += playerEntity.BiographyResistPoisonMod;
            }

            if ((effectFlags & DFCareer.EffectFlags.Disease) != 0)
            {
                toleranceFlags |= FormulaHelper.GetToleranceFlag(target.Career.Magic);

                // If you have "Immunity to Magic" trait then you are 100% immune to disease effects as well, as per the classic bug/exploit.
                if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                    return 0;

                toleranceFlags |= FormulaHelper.GetToleranceFlag(target.Career.Disease);

                // If you have the "Immunity" trait then you are 100% immune to effects of this type.
                if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                    return 0;

                if (target == playerEntity)
                    biographyMod += playerEntity.BiographyResistDiseaseMod;
            }

            if ((effectFlags & DFCareer.EffectFlags.Magic) != 0)
            {
                toleranceFlags |= FormulaHelper.GetToleranceFlag(target.Career.Magic);

                // If you have the "Immunity" trait then you are 100% immune to effects of this type.
                if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                    return 0;

                if (target == playerEntity)
                    biographyMod += playerEntity.BiographyResistMagicMod;
            }

            if ((effectFlags & DFCareer.EffectFlags.Fire) != 0)
            {
                toleranceFlags |= FormulaHelper.GetToleranceFlag(target.Career.Fire);

                // If you have the "Immunity" trait then you are 100% immune to effects of this type.
                if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                    return 0;
            }

            if ((effectFlags & DFCareer.EffectFlags.Frost) != 0)
            {
                toleranceFlags |= FormulaHelper.GetToleranceFlag(target.Career.Frost);

                // If you have the "Immunity" trait then you are 100% immune to effects of this type.
                if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                    return 0;
            }

            if ((effectFlags & DFCareer.EffectFlags.Shock) != 0)
            {
                toleranceFlags |= FormulaHelper.GetToleranceFlag(target.Career.Shock);

                // If you have the "Immunity" trait then you are 100% immune to effects of this type.
                if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                    return 0;
            }

            // Note: Differing from classic implementation here. In classic
            // immune grants always 100% resistance and critical weakness is
            // always 0% resistance if there is no immunity. Here we are using
            // a method that allows mixing different tolerance flags, getting
            // rid of related exploits when creating a character class.
            if ((toleranceFlags & DFCareer.ToleranceFlags.Immune) != 0)
                savingThrow += 50;
            if ((toleranceFlags & DFCareer.ToleranceFlags.CriticalWeakness) != 0)
                savingThrow -= 50;
            if ((toleranceFlags & DFCareer.ToleranceFlags.LowTolerance) != 0)
                savingThrow -= 25;
            if ((toleranceFlags & DFCareer.ToleranceFlags.Resistant) != 0)
                savingThrow += 25;

            savingThrow += biographyMod + modifier;
            if (elementType == DFCareer.Elements.Frost && target == playerEntity && playerEntity.Race == Races.Nord)
                savingThrow += 30;
            else if (elementType == DFCareer.Elements.Magic && target == playerEntity && playerEntity.Race == Races.Breton)
                savingThrow += 30;

            // Handle perfect immunity of 100% or greater
            // Otherwise clamping to 5-95 allows a perfectly immune character to sometimes receive incoming payload
            // This doesn't seem to match immunity intent or player expectations from classic
            if (savingThrow >= 100)
                return 0;

            // Increase saving throw by MagicResist, equal to LiveWillpower / 10 (rounded down)
            savingThrow += target.MagicResist;

            savingThrow = Mathf.Clamp(savingThrow, 5, 95);

            int percentDamageOrDuration = 100;
            int roll = Dice100.Roll();

            if (roll <= savingThrow)
            {
                // Percent damage/duration is prorated at within 20 of failed roll, as described in DF Chronicles
                if (savingThrow - 20 <= roll)
                    percentDamageOrDuration = 100 - 5 * (savingThrow - roll);
                else
                    percentDamageOrDuration = 0;
            }

            return Mathf.Clamp(percentDamageOrDuration, 0, 100);
        }
    }
}